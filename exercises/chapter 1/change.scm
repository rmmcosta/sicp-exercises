(define (count-change amount)
    (cond ((> amount 50) (cc amount 5))
        ((< amount 1) (exit))
        ((= amount 1) 1)
        ((or (< amount 5) (= amount 5)) (cc amount 1))
        ((or (< amount 10) (= amount 10)) (cc amount 2))
        ((or (< amount 25) (= amount 25)) (cc amount 3))
        ((or (< amount 50) (= amount 50)) (cc amount 4))))
(define (coin-type-amount type)
    (cond ((= type 1) 1)
        ((= type 2) 5)
        ((= type 3) 10)
        ((= type 4) 25)
        ((= type 5) 50)))
(define (cc amount type)
    (cond ((or (< amount 0) (= type 0)) 0)
        ((= amount 0) 1)
        (else (+ (cc amount (- type 1)) (cc (- amount (coin-type-amount type)) type)))))
(display "count-change 100 -> ") (display (count-change 100))
(newline)
(display "count-change 1 -> ") (display (count-change 1))
(newline)
(display "count-change 5 -> ") (display (count-change 5))
(newline)
(display "count-change 9 -> ") (display (count-change 9))
(newline)
(display "count-change 10 -> ") (display (count-change 10))
(newline)
(display "count-change 14 -> ") (display (count-change 14))
(newline)
(display "count-change 15 -> ") (display (count-change 15))
(newline)
(display "count-change 20 -> ") (display (count-change 20))
(newline)
(display "count-change 25 -> ") (display (count-change 25))
(newline)
(display "count-change 50 -> ") (display (count-change 50))
(newline)
(exit)