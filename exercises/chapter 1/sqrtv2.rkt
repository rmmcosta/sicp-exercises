(define precision 0.0001)
(define (abs x)
    (if (< x 0) (- x) x))
(display "abs(-5) -> ") (display (abs -5))
(newline)
(display "abs(3) -> ") (display (abs 3))
(newline)
(define (avg v1 v2)
    (/ (+ v1 v2) 2))
(display "avg(3,6) -> ") (display (avg 3 6))
(newline)
(display "avg(5,5) -> ") (display (avg 5 5))
(newline)
(define (square value) 
    (* value value))
(display "square 3 -> ") (display (square 3))
(newline)
(define (good-enough? guess x precision)
    (display "guess -> ") (display guess) (display ", x -> ") (display x) (display ", precision -> ") (display precision)
    (newline)
    (< (abs (- guess x)) precision))
(define (next-guess guess x)
    (avg guess (/ x guess)))
(define (sqrt-iter guess x precision)
    (if (good-enough? (square guess) x precision) guess (sqrt-iter (next-guess guess x) x precision)))
(define (sqrt x)
    (display "next-guess -> ") (display (next-guess (/ x 2.0) x))
    (newline)
    (display "assert false -> ") (display (good-enough? 3.0 3.1 0.01))
    (newline)
    (display "assert true -> ") (display (good-enough? 3.0 3.0 0.0001))
    (newline)
    (sqrt-iter (/ x 2.0) x precision))
(newline)
(display "---------")
(newline)
(display "sqrt 8 -> ") (display (sqrt 8))
(newline)
(display "---------")
(newline)
(display "sqrt 16 -> ") (display (sqrt 16))
(newline)
(exit)